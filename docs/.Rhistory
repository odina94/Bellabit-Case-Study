facet_wrap(~clarity)
ggplot(data=diamonds)+
geom_bar(aes(x=color,fill=cut))+
facet_wrap(~cut)
knitr::opts_chunk$set(echo = TRUE)
# Initialize a list to store the coefficients
coeff_list <- list()
# Initialize a list to store the smoothed functional data objects
force.fd <- list()
# Loop through columns of Raw_Force
for (i in 1:ncol(Raw_Force)) {
# Remove missing values from the current column
s1 <- na.omit(Raw_Force[, i])
# Extract and normalize the time values
time <- as.numeric(time(s1))
Min <- min(time)
Max <- max(time)
# Linear time normalization function
time_norm <- function(x) {
norm_x <- matrix()
for (i in 1:length(x)) {
norm_x <- (x - Min) / (Max - Min)
return(norm_x)
}
}
# Combine time and variable into a matrix
DF <- cbind(time, s1)
# Apply linear time normalization to the time column
DF[, 1] <- time_norm(DF[, 1])
# Define the time range for the basis
TimeRng <- c(0, 1)
# Set up the B-spline basis
force_basis <- create.bspline.basis(c(0, 1), norder = 4, nbasis = 300)
# Set up the penalty object penalizing the 2nd derivative and initially set lambda = 0.0001
force_fdPar = fdPar(fdobj = force_basis, Lfdobj = 2, lambda = 0.0001)
# Smooth the data using the penalty object
force.pen.smooth = smooth.basis(argvals = DF[, 1], y = DF[, 2], fdParobj = force_fdPar)
# Create a new data frame for the coefficients and assign the values
coeff_df <- data.frame(t(force.pen.smooth$fd[["coefs"]]))
# Store the smoothed functional data object in the force.fd list
force.fd[[i]] <- force.pen.smooth$fd
# Add the data frame to the coeff_list
coeff_list[[i]] <- coeff_df
# Plot the smooth curve(Remove "#' below to see the plots)
#plot(DF[, 1], DF[, 2], type = 'p', lwd = 0.00005, xlab = 'Time', ylab = 'Force',
#main = paste0(colnames(Raw_Force[i])))
#lines(force.pen.smooth$fd, col = 'red')
}
# Loading Libraries
library(imputeTS)
library(readr)
library(ggplot2)
library(fda)
library(ggplot2)
library(dplyr)
library(tidyr)
# Loading the data
Raw_Force<-read.csv("Raw_Force.csv")
Raw_F<-read.csv("Raw_Force.csv")
Raw_F$SN<-c(1:553)
# Reshape the data
Raw_F_long <- Raw_F%>%
pivot_longer(cols = -SN, names_to = "Column", values_to = "Value")
# Plot the data
ggplot(Raw_F_long, aes(x = SN, y = Value, color = Column)) +
geom_line() +
ggtitle("Force Profiles") +
xlab("Time") +
ylab("Force") +
theme_minimal()
# Define the order of the B-spline basis
norder <- 4
# Remove missing values from the s0103 column in the Raw_Force dataframe and extract time
s1 <- na.omit(Raw_Force$s0103)
time <- time(s1)
# Calculate the minimum and maximum values of the time vector
Min <- min(time)
Max <- max(time)
# Linear time normalization function
time_norm <- function(x) {
norm_x <- matrix()
for (i in 1:length(x)) {
# Apply linear time normalization
norm_x <- (x - Min) / (Max - Min)
return(norm_x)
}
}
# Form the matrix of time and Variable
DF <- cbind(time, s1)
# Apply linear time normalization to the time column
DF[, 1] <- time_norm(DF[, 1])
# Create a B-spline basis with specific parameters
force_basis <- create.bspline.basis(c(0, 1), norder = norder, nbasis = 300)
# Define a sequence of lambda values for the GCV search
loglam <- seq(-6, 0, 0.25)
# Initialize vectors to store GCV and degrees of freedom (DF) values
Gcvsave <- rep(NA, length(loglam))
names(Gcvsave) <- loglam
Dfsave <- Gcvsave
# Loop through different lambda values and calculate GCV and DF
for (i in 1:length(loglam)) {
# Define a new penalty based on the current lambda value
hgtfdPari <- fdPar(force_basis, 2, 10^loglam[i])
# Smooth the data with the updated penalty
hgtSm.i <- smooth.basis(DF[, 1], DF[, 2], hgtfdPari)
# Store GCV and DF values
Gcvsave[i] <- sum(hgtSm.i$gcv)
Dfsave[i] <- hgtSm.i$df
}
# Plot GCV values against the logarithm of lambda
plot(loglam, Gcvsave, 'o', las = 1, xlab = expression(log[10](lambda)),
ylab = expression(GCV(lambda)), lwd = 2 )
# Initialize a list to store the coefficients
coeff_list <- list()
# Initialize a list to store the smoothed functional data objects
force.fd <- list()
# Loop through columns of Raw_Force
for (i in 1:ncol(Raw_Force)) {
# Remove missing values from the current column
s1 <- na.omit(Raw_Force[, i])
# Extract and normalize the time values
time <- as.numeric(time(s1))
Min <- min(time)
Max <- max(time)
# Linear time normalization function
time_norm <- function(x) {
norm_x <- matrix()
for (i in 1:length(x)) {
norm_x <- (x - Min) / (Max - Min)
return(norm_x)
}
}
# Combine time and variable into a matrix
DF <- cbind(time, s1)
# Apply linear time normalization to the time column
DF[, 1] <- time_norm(DF[, 1])
# Define the time range for the basis
TimeRng <- c(0, 1)
# Set up the B-spline basis
force_basis <- create.bspline.basis(c(0, 1), norder = 4, nbasis = 300)
# Set up the penalty object penalizing the 2nd derivative and initially set lambda = 0.0001
force_fdPar = fdPar(fdobj = force_basis, Lfdobj = 2, lambda = 0.0001)
# Smooth the data using the penalty object
force.pen.smooth = smooth.basis(argvals = DF[, 1], y = DF[, 2], fdParobj = force_fdPar)
# Create a new data frame for the coefficients and assign the values
coeff_df <- data.frame(t(force.pen.smooth$fd[["coefs"]]))
# Store the smoothed functional data object in the force.fd list
force.fd[[i]] <- force.pen.smooth$fd
# Add the data frame to the coeff_list
coeff_list[[i]] <- coeff_df
# Plot the smooth curve(Remove "#' below to see the plots)
#plot(DF[, 1], DF[, 2], type = 'p', lwd = 0.00005, xlab = 'Time', ylab = 'Force',
#main = paste0(colnames(Raw_Force[i])))
#lines(force.pen.smooth$fd, col = 'red')
}
# Creating an empty matrix to store the fd coefficients
coefs <- matrix(data = NA, nrow = 300, ncol = 34)
# Loop through each element in the force.fd list
for (i in 1:length(force.fd)) {
# Extract and store the coefficients in the 'coefs' matrix
coefs[, i] <- force.fd[[i]][["coefs"]]
}
# Set row names of 'coefs' matrix to match those of the first set of coefficients
row.names(coefs) <- row.names(force.fd[[1]][["coefs"]])
# Set column names of 'coefs' matrix to match the column names of Raw_Force
colnames(coefs) <- colnames(Raw_Force)
# Create a functional data object (FD) using the coefficients, basis, and fdnames
Force_fd <- fd(coefs, force_basis, fdnames = fdname)
# Create vectors for time, repetitions, and values
time <- c(1:300)
reps <- colnames(Raw_Force)
values <- c('value')
# Create a list for fdnames
fdname <- list('time' = time, 'reps' = reps, 'values' = values)
# Create a functional data object (FD) using the coefficients, basis, and fdnames
Force_fd <- fd(coefs, force_basis, fdnames = fdname)
# Check the class of the resulting FD
class(Force_fd)
# Plot the smooth curves using the created FD
plot(Force_fd, xlab = 'time', ylab = 'force', main = 'Smooth curves')
install.packages("vitae")
library(vitae)
?rename
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(dplyr)
library(tidyverse)
library(readr)
library(dplyr)
library(tidyverse)
library(readr)
fitbit_data<-read.csv("Fitbit_Aggregated_data")
setwd( "C:/Users/egwue/OneDrive/Desktop/Cousera/data analytics/capstone/New folder")
getwd()
setwd( "C:/Users/egwue/OneDrive/Desktop/Cousera/data analytics/capstone/New folder")
setwd( "C:/Users/egwue/OneDrive/Desktop/Coursera/data analytics/capstone/New folder")
fitbit_data<-read.csv("Fitbit_Aggregated_data")
getwd()
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
fitbit_new<- fitbit_data%<%
t()
fitbit_new<- fitbit_data%>%
t()
View(fitbit_new)
fitbit_new<- t(fitbit_data)
View(fitbit_new)
View(fitbit_data)
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(diamonds)
ggplot(data=diamonds)+
geom_bar(aes(x=color,fill=cut))+
facet_wrap(~cut)
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
fit<-as.matrix(fitbit_data)
View(fit)
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
fit<-as.matrix(fitbit_data)
t(fit)
?t()
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
fit<-as.matrix(fitbit_data)
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(fitbit_data)
ggplot(data=fitbit_data)+
geom_bar(aes(x=average_steps))
ggplot(data=fitbit_data)+
geom_line(aes(x=day_of_activity,y=average_steps))
ggplot(data=fitbit_data)+
geom_point(aes(x=day_of_activity,y=average_steps))
ggplot(data=fitbit_data)+
geom_bar(aes(x=day_of_activity,y=average_steps))
ggplot(data=fitbit_data)+
geom_line(aes(x=day_of_activity,y=average_steps))
ggplot(data=fitbit_data)+
geom_line(aes(x=day_of_activity,y=average_steps,color="black"))
ggplot(data=fitbit_data)+
geom_line(aes(x=day_of_activity,y=average_steps))
ggplot(data=fitbit_data)+
geom_point(aes(x=day_of_activity,y=average_steps))+
geom_line()
ggplot(data=fitbit_data)+
geom_point(aes(x=day_of_activity,y=average_steps))+
geom_line(aes(x=day_of_activity,y=average_steps))
fitbit_new<-fitbit_data%>%
pivot_longer(cols=day_of_activity,names_to="Column",values_to = "Value")
View(fitbit_new)
ggplot(data = fitbit_data) +
geom_point(aes(x = day_of_activity, y = average_steps)) +
geom_line(aes(x = day_of_activity, y = average_steps))
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = average_steps), fill = "skyblue", color = "black") +
labs(title = "Average Steps per Day", x = "Day of Activity", y = "Average Steps")
ggplot(data = fitbit_data) +
+   geom_point(aes(x = day_of_activity, y = average_steps)) +
+   geom_line(aes(x = day_of_activity, y = average_steps))
ggplot(data = fitbit_data) +
geom_point(aes(x = day_of_activity, y = average_steps)) +
geom_line(aes(x = day_of_activity, y = average_steps))
>
ggplot(data = fitbit_data) +
geom_point(aes(x = day_of_activity, y = average_steps)) +
geom_line(aes(x = day_of_activity, y = average_steps))
plot<-function(metric,text){
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = average_steps), fill = "skyblue", color = "black") +
labs(title = paste0(text)" per Day", x = "Day of Activity", y = paste0(text))
plot<-function(metric,text){
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = metric), fill = "skyblue", color = "black") +
labs(title = paste0(text)" per Day", x = "Day of Activity", y = paste0(text))
plot<-function(metric,text){
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = metric), fill = "skyblue", color = "black") +
labs(title = paste0(text) " per Day", x = "Day of Activity", y = paste0(text))
plot <- function(metric, text) {
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = metric, fill = "skyblue", color = "black") +
labs(title = paste0(text, " per Day"), x = "Day of Activity", y = text)
}
plot <- function(metric, text) {
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = !!sym(metric)), fill = "skyblue", color = "black") +
labs(title = paste0(text, " per Day"), x = "Day of Activity", y = text)
}
plot(average_steps," Average steps")
plot("average_steps"," Average steps")
plot("average_steps"," Average steps")
plot("average_distance," Average Distance Covered")
plot("average_steps"," Average steps")
plot("average_distance"," Average Distance Covered")
plot("average_steps"," Average steps")
plot("average_distance"," Average Distance Covered")
plot("avg_calories", " Average Calories Burnt")
ggplot(data = fitbit_data) +
geom_bar(stat = "identity", aes(x = day_of_activity, y = !!sym(colnames(fitbit_data))), fill = "skyblue", color = "black") +
labs(title =  " per Day", x = "Day of Activity", y = text) +
facet_wrap(~colnames(fitbit_data))
library(ggplot2)
fitbit_data_long <- tidyr::pivot_longer(fitbit_data, cols = -day_of_activity, names_to = "Metric", values_to = "Value")
ggplot(fitbit_data_long, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
theme_minimal()
View(fitbit_data_long)
?labs
library(ggplot2)
fitbit_data_long <- tidyr::pivot_longer(fitbit_data, cols = -day_of_activity, names_to = "Metric", values_to = "Value")
ggplot(fitbit_data_long, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Column",values_to = "Value")
View(fitbit_new)
fitbit_new<-fitbit_data%>%
pivot_longer(cols=day_of_activity,names_to="Column",values_to = "Value")
View(fitbit_new)
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_new<-fitbit_data%>%
pivot_longer(cols=day_of_activity,names_to="Metric",values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_data_long <- tidyr::pivot_longer(fitbit_data, cols = -day_of_activity, names_to = "Metric", values_to = "Value")
ggplot(fitbit_data_long, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_data_long <- tidyr::pivot_longer(fitbit_data, cols = -day_of_activity, names_to = "Metric", values_to = "Value")
ggplot(fitbit_data_long, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_new<-fitbit_data%>%
pivot_longer(cols=day_of_activity,names_to="Column",values_to = "Value")
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Metric",values_to = "Value")
fitbit_data_long <- tidyr::pivot_longer(fitbit_data, cols = -day_of_activity, names_to = "Metric", values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Metric",values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_line(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_point(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_point(color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_point(color = Metric) +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_point(fill = Metric) +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_point() +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, color = Metric)) +
geom_point() +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, color = Metric)) +
geom_point() +
geom_line()+
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, color = Metric,group= Metric)) +
geom_point() +
geom_line()+
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(fitbit_data)
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Metric",values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_data$day_of_activity <- factor(fitbit_new$day_of_activity, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
fitbit_data$day_of_activity <- factor(fitbit_new$day_of_activity, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(fitbit_data)
fitbit_data$day_of_activity <- factor(fitbit_new$day_of_activity, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
View(fitbit_data)
fitbit_data$day_of_activity <- as.factor(fitbit_data$day_of_activity)
View(fitbit_data)
fitbit_data$day_of_activity <- as.factor(fitbit_data$day_of_activity)
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Metric",values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(fitbit_data)
fitbit_new<-fitbit_data%>%
pivot_longer(cols=-day_of_activity,names_to="Metric",values_to = "Value")
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fitbit_new, aes(x = day_of_activity, y = Value, color = Metric,group= Metric)) +
geom_point() +
geom_line()+
labs(title = "Daily Averages",
x = "Day of Activity",
y = "Average Value") +
facet_wrap(~ Metric, scales = "free_y", ncol = 2) +
# theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
getwd()
setwd("C:/Users/egwue/OneDrive/Documents/GitHub/Bellabit-Case-study")
fitbit_data<-read.csv("Fitbit_Aggregated_data.csv")
head(fitbit_data)
